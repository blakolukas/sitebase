#!/bin/bash

# Prevent running assemble in builders different than official STI image.
# The official nodejs:8-onbuild already run npm install and use different
# application folder.
[ -d "/usr/src/app" ] && exit 0

set -e

# FIXME: Linking of global modules is disabled for now as it causes npm failures
#        under RHEL7
# Global modules good to have
# npmgl=$(grep "^\s*[^#\s]" ../etc/npm_global_module_list | sort -u)
# Available global modules; only match top-level npm packages
#global_modules=$(npm ls -g 2> /dev/null | perl -ne 'print "$1\n" if /^\S+\s(\S+)\@[\d\.-]+/' | sort -u)
# List all modules in common
#module_list=$(/usr/bin/comm -12 <(echo "${global_modules}") | tr '\n' ' ')
# Link the modules
#npm link $module_list

safeLogging () {
    if [[ $1 =~ http[s]?://.*@.*$ ]]; then
        echo $1 | sed 's/^.*@/redacted@/'
    else
        echo $1
    fi
}

shopt -s dotglob
if [ -d /tmp/artifacts ] && [ "$(ls /tmp/artifacts/ 2>/dev/null)" ]; then
    echo "---> Restoring previous build artifacts ..."
    mv -T --verbose /tmp/artifacts/node_modules "${HOME}/node_modules"
fi

echo "---> Installing application source ..."
mv /tmp/src/* ./

# Fix source directory permissions
fix-permissions ./

if [ ! -z $HTTP_PROXY ]; then
    echo "---> Setting npm http proxy to" $(safeLogging $HTTP_PROXY)
	npm config set proxy $HTTP_PROXY
fi

if [ ! -z $http_proxy ]; then
    echo "---> Setting npm http proxy to" $(safeLogging $http_proxy)
	npm config set proxy $http_proxy
fi

if [ ! -z $HTTPS_PROXY ]; then
    echo "---> Setting npm https proxy to" $(safeLogging $HTTPS_PROXY)
	npm config set https-proxy $HTTPS_PROXY
fi

if [ ! -z $https_proxy ]; then
    echo "---> Setting npm https proxy to" $(safeLogging $https_proxy)
	npm config set https-proxy $https_proxy
fi

# Change the npm registry mirror if provided
if [ -n "$NPM_MIRROR" ]; then
	npm config set registry $NPM_MIRROR
fi

# Set the DEV_MODE to false by default.
if [ -z "$DEV_MODE" ]; then
  export DEV_MODE=false
fi

# If NODE_ENV is not set by the user, then NODE_ENV is determined by whether
# the container is run in development mode.
if [ -z "$NODE_ENV" ]; then
  if [ "$DEV_MODE" == true ]; then
    export NODE_ENV=development
  else
    export NODE_ENV=production
  fi
fi

# Function to handle FRONTEND_ADDONS
handle_frontend_addons() {
        echo "Processing FRONTEND_ADDONS... Updating addons in volto.config.js"
        addons=$(echo "$FRONTEND_ADDONS" | sed "s|[][']||g") # Remove brackets and quotes
		sed -i "/^const addons = \[/,/];/c\const addons = [$addons];" volto.config.js
		# Validate volto.config.js using Node.js
		if ! node --check volto.config.js; then
			echo "Error: volto.config.js contains syntax errors."
			exit 1  # Exit with a non-zero status to signal failure
		fi

		# Proceed with other build steps if validation passes
		echo "volto.config.js is valid. Continuing with the build process..."
}

# Function to handle SET_THEME
handle_set_theme() {
        echo "Processing SET_THEME... Setting theme in volto.config.js"
        sed -i "s|^const theme = .*|const theme = '$SET_THEME';|g" volto.config.js
}

# Function to handle ADD_PNPM_WORKSPACE
handle_pnpm_workspace() {
        echo "Processing ADD_PNPM_WORKSPACE... Updating pnpm-workspace.yaml"
        workspaces=$(echo "$ADD_PNPM_WORKSPACE" | sed "s|[][']||g") # Remove brackets and quotes
        IFS=',' read -ra workspace_array <<< "$workspaces"
        for workspace in "${workspace_array[@]}"; do
			workspace=$(echo "$workspace" | xargs)
            echo "  - '$workspace'" >> pnpm-workspace.yaml
        done
}

# Function to handle ADD_PACKAGE
# Example Input:
# export ADD_PACKAGE='[''"volto-sitedemo": "workspace:*"'']'
handle_add_package() {
    echo "Processing ADD_PACKAGE... Updating dependencies in package.json"

    # Remover colchetes e aspas extras da variável ADD_PACKAGE
    cleaned_packages=$(echo "$ADD_PACKAGE" | sed -E "s/^\[|\]$//g" | sed -E "s/'//g")

    # Criar uma string corretamente formatada para JSON
    package_entries=""
    IFS=',' read -ra package_array <<< "$cleaned_packages"
    for pkg in "${package_array[@]}"; do
        formatted_pkg=$(echo "$pkg" | sed -E 's/""/"/g' | sed -E 's/^"([^"]+)": "([^"]+)"$/    "\1": "\2"/')
        package_entries+="$formatted_pkg,\n"
    done
    package_entries=${package_entries%,\\n} # Remove a última vírgula e nova linha extra

    # Modificar o JSON preservando sua estrutura
    awk -v new_entries="$package_entries" '
    BEGIN { inside_deps=0 }
    /"dependencies": {/ { 
        inside_deps=1;
        print;
        next;
    }
    inside_deps && /^[ ]*}/ {
        printf ",\n%s\n", new_entries; # Adiciona os pacotes com uma vírgula antes
        inside_deps=0;
    }
    { print }
    ' package.json > package.json.tmp && mv package.json.tmp package.json
}

# Function to handle ADD_MRSDEVELOPER
handle_mrs_developer() {
        echo "Processing ADD_MRSDEVELOPER... Updating mrs.developer.json"
		
		echo "Below is the value sent by the platform to S2I:"
		echo $ADD_MRSDEVELOPER
    
		# Extract the new developers
		new_developers=$(echo "$ADD_MRSDEVELOPER" | sed 's|^{||; s|}$||')

		# Read the original file content
		original_content=$(cat mrs.developer.json)

		# Remove the last closing brace
		original_content=$(echo "$original_content" | sed '$ d')

		# Combine the content
		updated_content="${original_content},\n${new_developers}\n}"

		# Write to the temporary file
		echo -e "$updated_content" > mrs.developer.json.tmp && mv mrs.developer.json.tmp mrs.developer.json
		
		echo "Below is the final result of MRSDEVELOPER:"
		cat mrs.developer.json
}

handle_pnpm_install_command() {
	# This method is functional but depracated. Cant run before build deps...
	# How to use: ADD_PNPM_INSTALL_COMMAND='["pnpm add @eeacms/volto-eea-website-theme --filter volto-procergs-sitebase","pnpm add other-package --filter other"]'
    echo "Processing ADD_PNPM_INSTALL_COMMAND... executing pnpm install manually"

    # Remove brackets and extra spaces
    commands=$(echo "$ADD_PNPM_INSTALL_COMMAND" | sed -E 's/^\[\s*|\s*\]$//g')

    # Replace `","` for line breaks
    commands=$(echo "$commands" | sed 's/","/\n/g')

    # Read each line as a separate command
    while IFS= read -r command; do
        # Remove extra double quotes at the beginning and end of each command
        command=$(echo "$command" | sed -E 's/^"|"$//g')
        echo "Executing: $command"
        eval "$command"
    done <<< "$commands"
}

check_custom_installation_configurations() {
    echo "---> Checking for custom installation variables..."

    if [ -n "$FRONTEND_ADDONS" ]; then
        handle_frontend_addons
		echo "Below is the value sent by the platform to S2I:"
		echo $FRONTEND_ADDONS
		echo "Below is the final result of FROTEND_ADDONS:"
		cat volto.config.js
    fi

    if [ -n "$SET_THEME" ]; then
        handle_set_theme
		echo "Below is the value sent by the platform to S2I:"
		echo $SET_THEME
		echo "Below is the final result of SET_THEME:"
		cat volto.config.js
    fi

    if [ -n "$ADD_PNPM_WORKSPACE" ]; then
        handle_pnpm_workspace
		echo "Below is the value sent by the platform to S2I:"
		echo $ADD_PNPM_WORKSPACE
		echo "Below is the final result of ADD_PNPM_WORKSPACE:"
		cat pnpm-workspace.yaml
    fi

    if [ -n "$ADD_PACKAGE" ]; then
        handle_add_package
    fi

    if [ -n "$ADD_MRSDEVELOPER" ]; then
        handle_mrs_developer
    fi
	
	if [ -n "$ADD_PNPM_INSTALL_COMMAND" ]; then
		handle_pnpm_install_command
	fi
	
	echo "Completed custom installation check"
}


if [ "$NODE_ENV" != "production" ]; then
	echo "Starting custom S2I assembling for development"
	
	#echo "---> Building your Node application from source"
	# npm install
	
	echo "---> Installing pnpm"
	npm install -g pnpm
	
	check_custom_installation_configurations
	
	echo "---> Executing development installation process"
	make -j1 --debug=j install
	
	# set permissions for any installed artifacts
	fix-permissions ./
	
	# manually set permission to instance-wrapper
	chmod +x ./instance-wrapper

	echo "End of custom S2I assembling for development"
else
	echo "Starting custom S2I assembling for Production"
	
	echo "---> Installing pnpm"
	npm install -g pnpm@9.1.1
	
	check_custom_installation_configurations
	
	# echo "---> DEBUG INFO - Max user process and all limits (ulimit -u):"
	# ulimit -u  # Check max user processes
	
	# echo "---> DEBUG INFO - All limits (ulimit -a):"
	# ulimit -a  # Show all limits
	
	# echo "---> DEBUG INFO - Max open files (ulimit -n):"
	# ulimit -n  # Check max open files

	# echo "---> DEBUG INFO - PID limit from sys cgroup (cat /sys/fs/cgroup/pids.max):"
	# cat /sys/fs/cgroup/pids.max
	
	# echo "---> DEBUG INFO - Installing STRACE and prerequisites manually from source to troubleshoot SIGABORT"
	# Download and compile strace inside your S2I script
	# curl -O http://ftp.gnu.org/gnu/diffutils/diffutils-3.8.tar.xz
	# tar -xf diffutils-3.8.tar.xz
	# cd diffutils-3.8
	# ./configure
	# make
	# export PATH=/opt/app-root/src/diffutils-3.8/src:$PATH
	
	# cd ..
	
	# curl -L https://github.com/strace/strace/releases/download/v5.18/strace-5.18.tar.xz -o strace.tar.xz
	# tar -xf strace.tar.xz
	# cd strace-5.18
	# ./configure
	# make
	# make install

	# Add the local binary to your PATH
	# export PATH=/opt/app-root/src/strace-5.18/src:$PATH

	# cd ..

	echo "---> Executing development installation process (build command won't work without this)"
	NODE_ENV=development make install
	# NODE_ENV=development make -j1 --debug=j install
	#echo "--->---> Calling command: NODE_ENV=development pnpm dlx mrs-developer missdev --no-config --fetch-https"
	#NODE_ENV=development pnpm dlx mrs-developer missdev --no-config --fetch-https
	#echo "--->---> Calling command with TRACE: NODE_ENV=development pnpm i"
	# NODE_ENV=development PNPM_WORKERS=2 pnpm i --network-concurrency=1 --loglevel debug
	# NODE_ENV=development strace -f pnpm i --network-concurrency=1 --loglevel debug
	#PNPM_WORKSPACE_CONCURRENCY=1 PNPM_CHILD_CONCURRENCY=1 PNPM_FETCH_CONCURRENCY=1 NODE_ENV=development pnpm i --network-concurrency=1 --loglevel debug
	#export GOMAXPROCS=1
	#export NODE_OPTIONS="--max-old-space-size=2048"
	#NODE_ENV=development pnpm i --network-concurrency=1 --loglevel trace
	
	#echo "--->---> Calling command: NODE_ENV=development make build-deps"
	#NODE_ENV=development make build-deps

	echo "---> Executing pnpm build"
	make build
	
	# set permissions for any installed artifacts
	fix-permissions ./
	
	# manually set permission to instance-wrapper
	chmod +x ./instance-wrapper

	echo "End of custom S2I assembling for Production"
	
	#TODO: Evaluate future use of tmp, npm cache and development dependencies
	
	#echo "---> Installing all dependencies"
	#NODE_ENV=development npm install

	# #do not fail when there is no build script
	#echo "---> Building in production mode"
	#npm run ${NPM_BUILD:-build} --if-present

	#echo "---> Pruning the development dependencies"
	#npm prune

	#NPM_TMP=$(npm config get tmp)
	#if ! mountpoint $NPM_TMP; then
		#echo "---> Cleaning the $NPM_TMP/npm-*"
		#rm -rf $NPM_TMP/npm-*
	#fi

	# # Clear the npm's cache and tmp directories only if they are not a docker volumes
	#NPM_CACHE=$(npm config get cache)
	#if ! mountpoint $NPM_CACHE; then
		#echo "---> Cleaning the npm cache $NPM_CACHE"
		# #As of npm@5 even the 'npm cache clean --force' does not fully remove the cache directory
		# # instead of $NPM_CACHE* use $NPM_CACHE/*.
		# # We do not want to delete .npmrc file.
		# rm -rf "${NPM_CACHE:?}/"
	#fi
fi

# Fix source directory permissions
fix-permissions ./